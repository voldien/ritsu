CMAKE_MINIMUM_REQUIRED( VERSION 3.9...3.20 )
PROJECT(ritsu-deep-learning CXX)

# Project uses C++17
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

# Ouput directory for both library and executables.
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin CACHE INTERNAL "" FORCE)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib CACHE INTERNAL "" FORCE)

OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
IF(NOT BUILD_SHARED_LIBS)
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(LINK_SEARCH_START_STATIC TRUE)
ELSE()
	MESSAGE(STATUS "Shared libraries enabled")
ENDIF(NOT BUILD_SHARED_LIBS)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" )

######################################
#  All cmake build options.
######################################
#
OPTION(RITSU_WITH_MEM_JEMALLOC "Enable malloc replacement (http://www.canonware.com/jemalloc)" OFF)
MARK_AS_ADVANCED(RITSU_WITH_MEM_JEMALLOC)

OPTION(RITSU_BUILD_WITH_TEST "Enable Testing." OFF)
OPTION(RITSU_BUILD_WITH_ASAN "Enable AddressSanitizer." OFF )
OPTION(RITSU_BUILD_WITH_UBSAN "Enable Undefined Behavior sanitizer." OFF )
OPTION(RITSU_BUILD_WITH_TSAN "Enable Thread sanitizer" OFF)

OPTION(RITSU_BUILD_WITH_COVERAGE "Enable Code coverage report analysis." OFF)
OPTION(RITSU_BUILD_WITH_PROFILER "Enable Code Profiling." OFF)
OPTION(RITSU_BUILD_WITH_PEDANTIC "Enable Pedantic Compilation" OFF)

IF(RITSU_WITH_MEM_JEMALLOC)
	FIND_PACKAGE(JeMalloc)
	IF(NOT JeMalloc_FOUND)
		FIND_PACKAGE(PkgConfig REQUIRED)
		pkg_check_modules (JEMALLOC jemalloc)

		pkg_search_module(JEMALLOC REQUIRED jemalloc)
	ENDIF()
ENDIF()

IF(CMAKE_BUILD_TYPE MATCHES Release)
	MESSAGE(STATUS "Compile for release.")
	ADD_DEFINITIONS(-O3)
	ADD_DEFINITIONS(-march=native)
ENDIF()
IF(CMAKE_BUILD_TYPE MATCHES RelWithDebInfo)
	MESSAGE(STATUS "Compile for release with Debug.")
	ADD_DEFINITIONS(-O3)
	ADD_DEFINITIONS(-g3)
	ADD_DEFINITIONS(-march=native)
ENDIF()
IF(CMAKE_BUILD_TYPE MATCHES Debug)
	MESSAGE(STATUS "Compile for debug.")
	ADD_DEFINITIONS(-g3 -O0)
	ADD_DEFINITIONS(-march=native)
ENDIF()

#
IF(RITSU_BUILD_WITH_COVERAGE)
	MESSAGE(STATUS "Building with coverage")
	SET(GCC_COVERAGE_COMPILE_FLAGS "--coverage -fprofile-arcs -ftest-coverage")
	SET(GCC_COVERAGE_LINK_FLAGS "-lgcov")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
ENDIF()

#
IF(RITSU_BUILD_WITH_PROFILER)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
	SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
ENDIF()

###################
#	Vectorize
###################
FIND_PACKAGE(AVX)
FIND_PACKAGE(SSE)
# AVX If supported
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${AVX_FLAGS}")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} ${AVX_FLAGS}")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${AVX_FLAGS}")

#
IF(RITSU_BUILD_WITH_PEDANTIC)
	MESSAGE(STATUS "Using Pedantic Compilation")
	SET(PEDANTIC_COMPILE_FLAGS "-Wextra -Wall -pedantic")
	SET(PEDANTIC_COMPILE_FLAGS "${PEDANTIC_COMPILE_FLAGS} -Rpass=loop-vectorize -Rpass-missed=loop-vectorize -Rpass-analysis=loop-vectorize")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${PEDANTIC_COMPILE_FLAGS}")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PEDANTIC_COMPILE_FLAGS}")
	SET(CMAKE_LINKER_FLAGS "${CMAKE_CXX_FLAGS} ${PEDANTIC_COMPILE_FLAGS}")
ENDIF()

# Core library
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/ritsu)

# Example Projects
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/example)

# Test
IF(RITSU_BUILD_WITH_TEST)
	ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/benchmark)
	ENABLE_TESTING()
	ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
ENDIF()